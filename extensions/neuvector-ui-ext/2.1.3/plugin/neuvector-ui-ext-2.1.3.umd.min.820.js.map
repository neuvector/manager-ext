{"version":3,"file":"neuvector-ui-ext-2.1.3.umd.min.820.js","mappings":"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","sources":["webpack://neuvector-ui-ext-2.1.3/./utils/workloads.ts","webpack://neuvector-ui-ext-2.1.3/./components/Workloads/grids/WorkloadVulnerabilitiesGrid.vue","webpack://neuvector-ui-ext-2.1.3/./components/Workloads/grids/WorkloadVulnerabilitiesGrid.vue?58f4","webpack://neuvector-ui-ext-2.1.3/./plugins/workloads-class.js"],"sourcesContent":["import { getWorkloads } from '../plugins/workloads-class';\nimport { Store } from 'vuex';\nimport { cacheNvNamespace } from '../utils/common';\n\nexport async function cacheWorkloadsInfo(store: Store<any>) {\n    await cacheNvNamespace(store);\n    let workloadRes = await getWorkloads();\n    store.dispatch('neuvector/updateWorkloads', preprocessNeuVectorWorkloadsData(workloadRes.data.workloads));\n}\n\nfunction preprocessNeuVectorWorkloadsData(workloads: any[]) {\n  let workloadKV = new Map();\n  \n  return workloadKV;\n}\n\nexport async function cacheRancherWorkloadMap(rancherWorkloads: any[], store: Store<any>) {\n  await cacheNvNamespace(store);\n  let rancherWorkloadMap = new Map<string, Object>();\n  rancherWorkloads.forEach(workload => {\n    let rancherContainerID = workload.status.containerStatuses ? workload.status.containerStatuses[0]?.containerID || '' : '';\n    let nvContainerID = rancherContainerID.split('//')[1] || '';\n    if (!rancherWorkloadMap.has(nvContainerID)) {\n      rancherWorkloadMap.set(workload.id, nvContainerID);\n    }\n  });\n  console.log('rancherWorkloadMap', rancherWorkloadMap);\n  store.dispatch('neuvector/updateRancherWorkloadMap', rancherWorkloadMap);\n}","<script>\n    import { cacheRancherWorkloadMap } from '../../../utils/workloads';\n    import { Banner } from '@components/Banner';\n    import VulnerabilitiesGrid from '../../common/grids/VulnerabilitiesGrid';\n    import { getWorkloadVulnerabilities } from '../../../plugins/workloads-class';\n\n    export default {\n        components: {\n            Banner,\n            VulnerabilitiesGrid,\n        },\n        props: {\n            workload: Object,\n            isLightTheme: Boolean,\n        },\n        async fetch(){\n            try {\n                console.log('Get workload vulnerabilities...')\n                let nvContainerId = '';\n                if (this.workload) {\n                    //Workload info from props\n                } else {\n                    //Workload info from URL\n                    let rancherWorkloadMap = this.$store.getters['neuvector/rancherWorkloadMap'];\n                    let pathSections = location.pathname.split('/');\n                    if (!rancherWorkloadMap || rancherWorkloadMap.size === 0) {\n                        let rancherClassifiedworkloads = this.$store.getters['cluster/all'](pathSections[pathSections.length - 3]);\n                        await cacheRancherWorkloadMap(rancherClassifiedworkloads, this.$store);\n                        rancherWorkloadMap = this.$store.getters['neuvector/rancherWorkloadMap'];\n                    }\n                    let rancherWorkloadName = `${pathSections[pathSections.length - 2]}/${pathSections[pathSections.length - 1]}`;\n                    console.log(rancherWorkloadMap, rancherWorkloadName);\n                    if (rancherWorkloadMap.has(rancherWorkloadName)) {\n                        console.log(rancherWorkloadName);\n                        nvContainerId = rancherWorkloadMap.get(rancherWorkloadName);\n                    }\n                    this.rancherWorkloadName = rancherWorkloadName\n                }\n                const scannedWorkloadMap = this.$store.getters['neuvector/scannedWorkloadMap'];\n                if (scannedWorkloadMap.has(nvContainerId)) {\n                    this.vulnerabilities = scannedWorkloadMap.get(nvContainerId);\n                } else {\n                    let scannedWorkloadsRes = await getWorkloadVulnerabilities(nvContainerId);\n                    this.vulnerabilities = scannedWorkloadsRes.data.report.vulnerabilities;\n                    this.$store.dispatch('neuvector/updateScannedWorkloadMap', {workloadID: nvContainerId, scannedResult: this.vulnerabilities});\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        },\n        data() {\n          return {\n            vulnerabilities: null,\n            rancherWorkloadName: '',\n          };\n        },\n    };\n</script>\n\n<template>\n    <div>\n        <VulnerabilitiesGrid v-if=\"vulnerabilities && vulnerabilities.length > 0\" :vulnerabilities=\"vulnerabilities\" :csvFileName=\"rancherWorkloadName\"></VulnerabilitiesGrid>\n        <div v-else>\n          <Banner\n            class=\"type-banner mb-20 mt-0\"\n            color=\"warning\"\n            :label=\"t('general.NO_ROWS')\"\n          />\n        </div>\n    </div> \n</template>","import { render } from \"./WorkloadVulnerabilitiesGrid.vue?vue&type=template&id=91fe988c\"\nimport script from \"./WorkloadVulnerabilitiesGrid.vue?vue&type=script&lang=js\"\nexport * from \"./WorkloadVulnerabilitiesGrid.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import axios from '../interceptor/http-interceptor';\nimport { getSSOUrl } from '../utils/common';\nimport { PATH } from '../types/path';\n\nexport async function getWorkloads() {\n    return axios({\n        url: getSSOUrl(PATH.SCANNED_CONTAINER_URL),\n        method: 'get',\n    });\n};\n\nexport async function getWorkloadVulnerabilities(id) {\n    return axios({\n        url: getSSOUrl(PATH.SCAN_URL),\n        method: 'get',\n        params: {\n            id: id\n        }\n    });\n};\n"],"names":["async","cacheWorkloadsInfo","store","cacheNvNamespace","workloadRes","getWorkloads","dispatch","preprocessNeuVectorWorkloadsData","data","workloads","workloadKV","Map","cacheRancherWorkloadMap","rancherWorkloads","rancherWorkloadMap","forEach","workload","rancherContainerID","status","containerStatuses","containerID","nvContainerID","split","has","set","id","console","log","_createElementBlock","$data","vulnerabilities","length","_createBlock","_component_VulnerabilitiesGrid","csvFileName","rancherWorkloadName","_hoisted_1","_createVNode","_component_Banner","class","color","label","_ctx","t","components","Banner","VulnerabilitiesGrid","props","Object","isLightTheme","Boolean","fetch","nvContainerId","this","$store","getters","pathSections","location","pathname","size","rancherClassifiedworkloads","get","scannedWorkloadMap","scannedWorkloadsRes","getWorkloadVulnerabilities","report","workloadID","scannedResult","error","__exports__","render","axios","url","getSSOUrl","PATH","SCANNED_CONTAINER_URL","method","SCAN_URL","params"],"sourceRoot":""}